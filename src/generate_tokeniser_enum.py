import sys;
import os;

fileName = "./src/tokens";
specifiers = [

    "TOK_FLOAT_IMM", "TOK_INT_IMM", "TOK_CHAR_IMM","TOK_STRING_IMM", "TOK_IDENTIFIER", "TOK_INVALID",

];
tokens = {
    # Keywords
    "auto": "TOK_KEYWORD_AUTO",
    "break": "TOK_KEYWORD_BREAK",
    "case": "TOK_KEYWORD_CASE",
    "char": "TOK_KEYWORD_CHAR",
    "continue": "TOK_KEYWORD_CONTINUE",
    "do": "TOK_KEYWORD_DO",
    "default": "TOK_KEYWORD_DEFAULT",
    "const": "TOK_KEYWORD_CONST",
    "double": "TOK_KEYWORD_DOUBLE",
    "else": "TOK_KEYWORD_ELSE",
    "enum": "TOK_KEYWORD_ENUM",
    "extern": "TOK_KEYWORD_EXTERN",
    "for": "TOK_KEYWORD_FOR",
    "if": "TOK_KEYWORD_IF",
    "goto": "TOK_KEYWORD_GOTO",
    "float": "TOK_KEYWORD_FLOAT",
    "int": "TOK_KEYWORD_INT",
    "long": "TOK_KEYWORD_LONG",
    "register": "TOK_KEYWORD_REGISTER",
    "return": "TOK_KEYWORD_RETURN",
    "signed": "TOK_KEYWORD_SIGNED",
    "static": "TOK_KEYWORD_STATIC",
    "sizeof": "TOK_KEYWORD_SIZEOF",
    "short": "TOK_KEYWORD_SHORT",
    "struct": "TOK_KEYWORD_STRUCT",
    "switch": "TOK_KEYWORD_SWITCH",
    "typedef": "TOK_KEYWORD_TYPEDEF",
    "union": "TOK_KEYWORD_UNION",
    "void": "TOK_KEYWORD_VOID",
    "while": "TOK_KEYWORD_WHILE",
    "volatile": "TOK_KEYWORD_VOLATILE",
    "unsigned": "TOK_KEYWORD_UNSIGNED",
    
    # Symbols
    "+": "TOK_SYMBOL_PLUS",
    "-": "TOK_SYMBOL_MINUS",
    "*": "TOK_SYMBOL_ASTERISK",
    "/": "TOK_SYMBOL_SLASH",
    "%": "TOK_SYMBOL_PERCENT",
    "=": "TOK_SYMBOL_EQUALS",
    "==": "TOK_SYMBOL_EQEQ",
    "!=": "TOK_SYMBOL_NOTEQ",
    "<": "TOK_SYMBOL_LESS",
    ">": "TOK_SYMBOL_GREATER",
    "<=": "TOK_SYMBOL_LESSEQ",
    ">=": "TOK_SYMBOL_GREATEREQ",
    "&&": "TOK_SYMBOL_ANDAND",
    "||": "TOK_SYMBOL_OROR",
    "!": "TOK_SYMBOL_NOT",
    "&": "TOK_SYMBOL_AMP",
    "|": "TOK_SYMBOL_PIPE",
    "^": "TOK_SYMBOL_CARET",
    "~": "TOK_SYMBOL_TILDE",
    "<<": "TOK_SYMBOL_LSHIFT",
    ">>": "TOK_SYMBOL_RSHIFT",
    "++": "TOK_SYMBOL_INC",
    "--": "TOK_SYMBOL_DEC",
    "->": "TOK_SYMBOL_ARROW",
    ".": "TOK_SYMBOL_DOT",
    ",": "TOK_SYMBOL_COMMA",
    ";": "TOK_SYMBOL_SEMICOLON",
    ":": "TOK_SYMBOL_COLON",
    "?": "TOK_SYMBOL_QUESTION",
    "(": "TOK_SYMBOL_LPAREN",
    ")": "TOK_SYMBOL_RPAREN",
    "{": "TOK_SYMBOL_LBRACE",
    "}": "TOK_SYMBOL_RBRACE",
    "[": "TOK_SYMBOL_LBRACKET",
    "]": "TOK_SYMBOL_RBRACKET"
};






def main() -> int:

    largestKeyLength = len(max(tokens.keys(), key=len));
    largestValueLength = len(max(tokens.values(), key=len));


    try:
        with open(str(fileName) + ".h++", 'w') as hFile, open(str(fileName) + ".c++", 'w') as cFile:

            cFile.write("//Generated by:" + str(os.path.basename(__file__) + "\n"));
            
            
            #cFile.write("#include \"" + str(fileName) + ".h++" + "\"\n\n");

            #Hard code this for now
            cFile.write("#include \"tokens.h++" + "\"\n\n");


            cFile.write("const string tokens[] = {\n");

            hFile.write("//Generated by:" + str(os.path.basename(__file__) + "\n"));
            hFile.write("#include <string>\n");
            hFile.write("#define NUM_TOKENS " + str(len(tokens)) + "\n");
            hFile.write("using namespace std;\n\n");
            hFile.write("extern const string tokens[];\n");
            hFile.write("typedef enum TOKEN_ENUM : int {\n");

            index = -1;
            for item in specifiers:
                hFile.write("\t" + str(item) + " = " + str(index) + ",\n");
                index -= 1;
            
            index = 0;
            for key, value in tokens.items():

                whiteSpace = (largestValueLength - len(value)) * " ";
                hFile.write("\t" + str(value) + ", " + whiteSpace + "//" + str(index) + " ::  " + str(key) + "\n");
        
                whiteSpace = ((largestKeyLength - len(key)) * " ");
                cFile.write("\t\"" + str(key) + "\", " + whiteSpace + "//" + str(index) + " :: " + str(value) + "\n");


                index += 1;

            hFile.write("} TOKEN_ENUM;\n");
            cFile.write("};\n");

            return 0;

    except:
        print("Unable to open .h++ or .c++ file\n");
        return 1;






if __name__ == "__main__":
    sys.exit(main());


