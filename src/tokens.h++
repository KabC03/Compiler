//Generated by:generate_tokeniser_enum.py
#include <string>
#define NUM_TOKENS 28
using namespace std;

extern const string tokens[];
typedef enum TOKEN_ENUM : int {
	TOK_FLOAT_IMM = -1,
	TOK_INT_IMM = -2,
	TOK_CHAR_IMM = -3,
	TOK_STRING_IMM = -4,
	TOK_IDENTIFIER = -5,
	TOK_INVALID = -6,
	TOK_EOF = -7,
	TOK_KEYWORD_CHAR = 0,       //0 ::  char
	TOK_KEYWORD_INT = 1,        //1 ::  int
	TOK_KEYWORD_FLOAT = 2,      //2 ::  float
	TOK_KEYWORD_PTR = 3,        //3 ::  ptr
	TOK_SYMBOL_ASSIGNMENT = 4,  //4 ::  =
	TOK_KEYWORD_WHILE = 5,      //5 ::  while
	TOK_KEYWORD_IF = 6,         //6 ::  if
	TOK_KEYWORD_ELIF = 7,       //7 ::  elif
	TOK_KEYWORD_ELSE = 8,       //8 ::  else
	TOK_KEYWORD_RETURN = 9,     //9 ::  return
	TOK_SYMBOL_PLUS = 10,        //10 ::  +
	TOK_SYMBOL_MINUS = 11,       //11 ::  -
	TOK_SYMBOL_MUL = 12,         //12 ::  *
	TOK_SYMBOL_DIV = 13,         //13 ::  /
	TOK_SYMBOL_EQUALS = 14,      //14 ::  ==
	TOK_SYMBOL_NEQ = 15,         //15 ::  !=
	TOK_SYMBOL_GREQ = 16,        //16 ::  >=
	TOK_SYMBOL_LEQ = 17,         //17 ::  <=
	TOK_SYMBOL_GREATER = 18,     //18 ::  >
	TOK_SYMBOL_LESS = 19,        //19 ::  <
	TOK_SYMBOL_COMMA = 20,       //20 ::  ,
	TOK_SEMICOLON = 21,          //21 ::  ;
	TOK_SYMBOL_REFERENCE = 22,   //22 ::  #
	TOK_SYMBOL_DEREFERENCE = 23, //23 ::  @
	TOK_BRACE_OPEN_PAREN = 24,   //24 ::  (
	TOK_BRACE_CLOSE_PAREN = 25,  //25 ::  )
	TOK_BRACE_OPEN_CURLEY = 26,  //26 ::  {
	TOK_BRACE_CLOSE_CURLEY = 27, //27 ::  }
} TOKEN_ENUM;
