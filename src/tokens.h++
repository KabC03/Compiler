//Generated by:generate_tokeniser_enum.py
#include <string>
#define NUM_TOKENS 67
using namespace std;

extern const string tokens[];
typedef enum TOKEN_ENUM : int {
	TOK_FLOAT_IMM = -1,
	TOK_INT_IMM = -2,
	TOK_CHAR_IMM = -3,
	TOK_STRING_IMM = -4,
	TOK_IDENTIFIER = -5,
	TOK_INVALID = -6,
	TOK_KEYWORD_AUTO,     //0 ::  auto
	TOK_KEYWORD_BREAK,    //1 ::  break
	TOK_KEYWORD_CASE,     //2 ::  case
	TOK_KEYWORD_CHAR,     //3 ::  char
	TOK_KEYWORD_CONTINUE, //4 ::  continue
	TOK_KEYWORD_DO,       //5 ::  do
	TOK_KEYWORD_DEFAULT,  //6 ::  default
	TOK_KEYWORD_CONST,    //7 ::  const
	TOK_KEYWORD_DOUBLE,   //8 ::  double
	TOK_KEYWORD_ELSE,     //9 ::  else
	TOK_KEYWORD_ENUM,     //10 ::  enum
	TOK_KEYWORD_EXTERN,   //11 ::  extern
	TOK_KEYWORD_FOR,      //12 ::  for
	TOK_KEYWORD_IF,       //13 ::  if
	TOK_KEYWORD_GOTO,     //14 ::  goto
	TOK_KEYWORD_FLOAT,    //15 ::  float
	TOK_KEYWORD_INT,      //16 ::  int
	TOK_KEYWORD_LONG,     //17 ::  long
	TOK_KEYWORD_REGISTER, //18 ::  register
	TOK_KEYWORD_RETURN,   //19 ::  return
	TOK_KEYWORD_SIGNED,   //20 ::  signed
	TOK_KEYWORD_STATIC,   //21 ::  static
	TOK_KEYWORD_SIZEOF,   //22 ::  sizeof
	TOK_KEYWORD_SHORT,    //23 ::  short
	TOK_KEYWORD_STRUCT,   //24 ::  struct
	TOK_KEYWORD_SWITCH,   //25 ::  switch
	TOK_KEYWORD_TYPEDEF,  //26 ::  typedef
	TOK_KEYWORD_UNION,    //27 ::  union
	TOK_KEYWORD_VOID,     //28 ::  void
	TOK_KEYWORD_WHILE,    //29 ::  while
	TOK_KEYWORD_VOLATILE, //30 ::  volatile
	TOK_KEYWORD_UNSIGNED, //31 ::  unsigned
	TOK_SYMBOL_PLUS,      //32 ::  +
	TOK_SYMBOL_MINUS,     //33 ::  -
	TOK_SYMBOL_ASTERISK,  //34 ::  *
	TOK_SYMBOL_SLASH,     //35 ::  /
	TOK_SYMBOL_PERCENT,   //36 ::  %
	TOK_SYMBOL_EQUALS,    //37 ::  =
	TOK_SYMBOL_EQEQ,      //38 ::  ==
	TOK_SYMBOL_NOTEQ,     //39 ::  !=
	TOK_SYMBOL_LESS,      //40 ::  <
	TOK_SYMBOL_GREATER,   //41 ::  >
	TOK_SYMBOL_LESSEQ,    //42 ::  <=
	TOK_SYMBOL_GREATEREQ, //43 ::  >=
	TOK_SYMBOL_ANDAND,    //44 ::  &&
	TOK_SYMBOL_OROR,      //45 ::  ||
	TOK_SYMBOL_NOT,       //46 ::  !
	TOK_SYMBOL_AMP,       //47 ::  &
	TOK_SYMBOL_PIPE,      //48 ::  |
	TOK_SYMBOL_CARET,     //49 ::  ^
	TOK_SYMBOL_TILDE,     //50 ::  ~
	TOK_SYMBOL_LSHIFT,    //51 ::  <<
	TOK_SYMBOL_RSHIFT,    //52 ::  >>
	TOK_SYMBOL_INC,       //53 ::  ++
	TOK_SYMBOL_DEC,       //54 ::  --
	TOK_SYMBOL_ARROW,     //55 ::  ->
	TOK_SYMBOL_DOT,       //56 ::  .
	TOK_SYMBOL_COMMA,     //57 ::  ,
	TOK_SYMBOL_SEMICOLON, //58 ::  ;
	TOK_SYMBOL_COLON,     //59 ::  :
	TOK_SYMBOL_QUESTION,  //60 ::  ?
	TOK_SYMBOL_LPAREN,    //61 ::  (
	TOK_SYMBOL_RPAREN,    //62 ::  )
	TOK_SYMBOL_LBRACE,    //63 ::  {
	TOK_SYMBOL_RBRACE,    //64 ::  }
	TOK_SYMBOL_LBRACKET,  //65 ::  [
	TOK_SYMBOL_RBRACKET,  //66 ::  ]
} TOKEN_ENUM;
