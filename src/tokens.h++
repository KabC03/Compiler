//Generated by:generate_tokeniser_enum.py
#include <string>
#define NUM_TOKENS 33
using namespace std;

extern const string tokens[];
typedef enum TOKEN_ENUM : int {
	TOK_TYPE_INT = -1,
	TOK_TYPE_INT_IMM = -2,
	TOK_TYPE_PTR = -3,
	TOK_IDENTIFIER = -4,
	TOK_INVALID = -5,
	TOK_EOF = -6,
	TOK_KEYWORD_INT = 0,        //0 ::  int
	TOK_KEYWORD_PTR = 1,        //1 ::  ptr
	TOK_SYMBOL_ASSIGNMENT = 2,  //2 ::  =
	TOK_KEYWORD_SET = 3,        //3 ::  set
	TOK_KEYWORD_WHILE = 4,      //4 ::  while
	TOK_KEYWORD_IF = 5,         //5 ::  if
	TOK_KEYWORD_GOTO = 6,       //6 ::  goto
	TOK_KEYWORD_LABEL = 7,      //7 ::  label
	TOK_KEYWORD_CALL = 8,       //8 ::  call
	TOK_KEYWORD_FN = 9,         //9 ::  fn
	TOK_KEYWORD_RETURN = 10,     //10 ::  return
	TOK_SYMBOL_RETURN_TYPE = 11, //11 ::  ->
	TOK_SYMBOL_PLUS = 12,        //12 ::  +
	TOK_SYMBOL_MINUS = 13,       //13 ::  -
	TOK_SYMBOL_MUL = 14,         //14 ::  *
	TOK_SYMBOL_DIV = 15,         //15 ::  /
	TOK_SYMBOL_EQ = 16,          //16 ::  ==
	TOK_SYMBOL_NEQ = 17,         //17 ::  !=
	TOK_SYMBOL_GREQ = 18,        //18 ::  >=
	TOK_SYMBOL_LEQ = 19,         //19 ::  <=
	TOK_SYMBOL_GRE = 20,         //20 ::  >
	TOK_SYMBOL_LES = 21,         //21 ::  <
	TOK_SYMBOL_COMMA = 22,       //22 ::  ,
	TOK_SYMBOL_SEMICOLON = 23,   //23 ::  ;
	TOK_SYMBOL_REFERENCE = 24,   //24 ::  $
	TOK_SYMBOL_DEREFERENCE = 25, //25 ::  @
	TOK_BRACE_OPEN_PAREN = 26,   //26 ::  (
	TOK_BRACE_CLOSE_PAREN = 27,  //27 ::  )
	TOK_BRACE_OPEN_CURLEY = 28,  //28 ::  {
	TOK_BRACE_CLOSE_CURLEY = 29, //29 ::  }
	TOK_BRACE_OPEN_SQUARE = 30,  //30 ::  [
	TOK_BRACE_CLOSE_SQUARE = 31, //31 ::  ]
	TOK_SYMBOL_COMMENT = 32,     //32 ::  #
} TOKEN_ENUM;
