//Generated by:generate_tokeniser_enum.py
#include <string>
#define NUM_TOKENS 31
using namespace std;

extern const string tokens[];
typedef enum TOKEN_ENUM : int {
	TOK_FLOAT_IMM = -1,
	TOK_INT_IMM = -2,
	TOK_CHAR_IMM = -3,
	TOK_STRING_IMM = -4,
	TOK_IDENTIFIER = -5,
	TOK_INVALID = -6,
	TOK_EOF = -7,
	TOK_TYPE_INT = -8,
	TOK_TYPE_FLOAT = -9,
	TOK_TYPE_PTR_REF = -10,
	TOK_TYPE_PTR_DEREF = -11,
	TOK_KEYWORD_CHAR = 0,       //0 ::  char
	TOK_KEYWORD_INT = 1,        //1 ::  int
	TOK_KEYWORD_FLOAT = 2,      //2 ::  float
	TOK_SYMBOL_ASSIGNMENT = 3,  //3 ::  =
	TOK_KEYWORD_WHILE = 4,      //4 ::  while
	TOK_KEYWORD_IF = 5,         //5 ::  if
	TOK_KEYWORD_ELIF = 6,       //6 ::  elif
	TOK_KEYWORD_ELSE = 7,       //7 ::  else
	TOK_KEYWORD_CALL = 8,       //8 ::  call
	TOK_KEYWORD_FN = 9,         //9 ::  fn
	TOK_KEYWORD_RETURN = 10,     //10 ::  return
	TOK_SYMBOL_PLUS = 11,        //11 ::  +
	TOK_SYMBOL_MINUS = 12,       //12 ::  -
	TOK_SYMBOL_MUL = 13,         //13 ::  *
	TOK_SYMBOL_DIV = 14,         //14 ::  /
	TOK_SYMBOL_EQUALS = 15,      //15 ::  ==
	TOK_SYMBOL_NEQ = 16,         //16 ::  !=
	TOK_SYMBOL_GREQ = 17,        //17 ::  >=
	TOK_SYMBOL_LEQ = 18,         //18 ::  <=
	TOK_SYMBOL_GREATER = 19,     //19 ::  >
	TOK_SYMBOL_LESS = 20,        //20 ::  <
	TOK_SYMBOL_COMMA = 21,       //21 ::  ,
	TOK_SEMICOLON = 22,          //22 ::  ;
	TOK_SYMBOL_REFERENCE = 23,   //23 ::  #
	TOK_SYMBOL_DEREFERENCE = 24, //24 ::  @
	TOK_BRACE_OPEN_PAREN = 25,   //25 ::  (
	TOK_BRACE_CLOSE_PAREN = 26,  //26 ::  )
	TOK_BRACE_OPEN_CURLEY = 27,  //27 ::  {
	TOK_BRACE_CLOSE_CURLEY = 28, //28 ::  }
	TOK_BRACE_OPEN_SQUARE = 29,  //29 ::  [
	TOK_BRACE_CLOSE_SQUARE = 30, //30 ::  ]
} TOKEN_ENUM;
