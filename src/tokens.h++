//Generated by:generate_tokeniser_enum.py
#include <string>
#define NUM_TOKENS 31
using namespace std;

extern const string tokens[];
typedef enum TOKEN_ENUM : int {
	TOK_TYPE_INT = -1,
	TOK_TYPE_INT_IMM = -2,
	TOK_TYPE_PTR = -3,
	TOK_IDENTIFIER = -4,
	TOK_INVALID = -5,
	TOK_EOF = -6,
	TOK_KEYWORD_INT = 0,        //0 ::  int
	TOK_KEYWORD_PTR = 1,        //1 ::  ptr
	TOK_SYMBOL_ASSIGNMENT = 2,  //2 ::  =
	TOK_KEYWORD_WHILE = 3,      //3 ::  while
	TOK_KEYWORD_IF = 4,         //4 ::  if
	TOK_KEYWORD_GOTO = 5,       //5 ::  goto
	TOK_KEYWORD_LABEL = 6,      //6 ::  label
	TOK_KEYWORD_CALL = 7,       //7 ::  call
	TOK_KEYWORD_FN = 8,         //8 ::  fn
	TOK_KEYWORD_RETURN = 9,     //9 ::  return
	TOK_SYMBOL_PLUS = 10,        //10 ::  +
	TOK_SYMBOL_MINUS = 11,       //11 ::  -
	TOK_SYMBOL_MUL = 12,         //12 ::  *
	TOK_SYMBOL_DIV = 13,         //13 ::  /
	TOK_SYMBOL_EQ = 14,          //14 ::  ==
	TOK_SYMBOL_NEQ = 15,         //15 ::  !=
	TOK_SYMBOL_GREQ = 16,        //16 ::  >=
	TOK_SYMBOL_LEQ = 17,         //17 ::  <=
	TOK_SYMBOL_GRE = 18,         //18 ::  >
	TOK_SYMBOL_LES = 19,         //19 ::  <
	TOK_SYMBOL_COMMA = 20,       //20 ::  ,
	TOK_SEMICOLON = 21,          //21 ::  ;
	TOK_SYMBOL_REFERENCE = 22,   //22 ::  $
	TOK_SYMBOL_DEREFERENCE = 23, //23 ::  @
	TOK_BRACE_OPEN_PAREN = 24,   //24 ::  (
	TOK_BRACE_CLOSE_PAREN = 25,  //25 ::  )
	TOK_BRACE_OPEN_CURLEY = 26,  //26 ::  {
	TOK_BRACE_CLOSE_CURLEY = 27, //27 ::  }
	TOK_BRACE_OPEN_SQUARE = 28,  //28 ::  [
	TOK_BRACE_CLOSE_SQUARE = 29, //29 ::  ]
	TOK_SYMBOL_COMMENT = 30,     //30 ::  #
} TOKEN_ENUM;
