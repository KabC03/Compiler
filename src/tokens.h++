//Generated by:generate_tokeniser_enum.py
#include <string>
#define NUM_TOKENS 29
using namespace std;

extern const string tokens[];
typedef enum TOKEN_ENUM : int {
	TOK_FLOAT_IMM = -1,
	TOK_INT_IMM = -2,
	TOK_CHAR_IMM = -3,
	TOK_STRING_IMM = -4,
	TOK_IDENTIFIER = -5,
	TOK_INVALID = -6,
	TOK_EOF = -7,
	TOK_KEYWORD_CHAR = 0,       //0 ::  char
	TOK_KEYWORD_INT = 1,        //1 ::  int
	TOK_KEYWORD_FLOAT = 2,      //2 ::  float
	TOK_SYMBOL_ASSIGNMENT = 3,  //3 ::  =
	TOK_KEYWORD_WHILE = 4,      //4 ::  while
	TOK_KEYWORD_IF = 5,         //5 ::  if
	TOK_KEYWORD_ELIF = 6,       //6 ::  elif
	TOK_KEYWORD_ELSE = 7,       //7 ::  else
	TOK_KEYWORD_RETURN = 8,     //8 ::  return
	TOK_SYMBOL_PLUS = 9,        //9 ::  +
	TOK_SYMBOL_MINUS = 10,       //10 ::  -
	TOK_SYMBOL_MUL = 11,         //11 ::  *
	TOK_SYMBOL_DIV = 12,         //12 ::  /
	TOK_SYMBOL_EQUALS = 13,      //13 ::  ==
	TOK_SYMBOL_NEQ = 14,         //14 ::  !=
	TOK_SYMBOL_GREQ = 15,        //15 ::  >=
	TOK_SYMBOL_LEQ = 16,         //16 ::  <=
	TOK_SYMBOL_GREATER = 17,     //17 ::  >
	TOK_SYMBOL_LESS = 18,        //18 ::  <
	TOK_SYMBOL_COMMA = 19,       //19 ::  ,
	TOK_SEMICOLON = 20,          //20 ::  ;
	TOK_SYMBOL_REFERENCE = 21,   //21 ::  #
	TOK_SYMBOL_DEREFERENCE = 22, //22 ::  @
	TOK_BRACE_OPEN_PAREN = 23,   //23 ::  (
	TOK_BRACE_CLOSE_PAREN = 24,  //24 ::  )
	TOK_BRACE_OPEN_CURLEY = 25,  //25 ::  {
	TOK_BRACE_CLOSE_CURLEY = 26, //26 ::  }
	TOK_BRACE_OPEN_SQUARE = 27,  //27 ::  [
	TOK_BRACE_CLOSE_SQUARE = 28, //28 ::  ]
} TOKEN_ENUM;
