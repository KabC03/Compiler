//Generated by:generate_tokeniser_enum.py
#include "tokens.h++"

const string tokens[] = {
	"auto",     //0 :: TOK_KEYWORD_AUTO
	"break",    //1 :: TOK_KEYWORD_BREAK
	"case",     //2 :: TOK_KEYWORD_CASE
	"char",     //3 :: TOK_KEYWORD_CHAR
	"continue", //4 :: TOK_KEYWORD_CONTINUE
	"do",       //5 :: TOK_KEYWORD_DO
	"default",  //6 :: TOK_KEYWORD_DEFAULT
	"const",    //7 :: TOK_KEYWORD_CONST
	"double",   //8 :: TOK_KEYWORD_DOUBLE
	"else",     //9 :: TOK_KEYWORD_ELSE
	"enum",     //10 :: TOK_KEYWORD_ENUM
	"extern",   //11 :: TOK_KEYWORD_EXTERN
	"for",      //12 :: TOK_KEYWORD_FOR
	"if",       //13 :: TOK_KEYWORD_IF
	"goto",     //14 :: TOK_KEYWORD_GOTO
	"float",    //15 :: TOK_KEYWORD_FLOAT
	"int",      //16 :: TOK_KEYWORD_INT
	"long",     //17 :: TOK_KEYWORD_LONG
	"register", //18 :: TOK_KEYWORD_REGISTER
	"return",   //19 :: TOK_KEYWORD_RETURN
	"signed",   //20 :: TOK_KEYWORD_SIGNED
	"static",   //21 :: TOK_KEYWORD_STATIC
	"sizeof",   //22 :: TOK_KEYWORD_SIZEOF
	"short",    //23 :: TOK_KEYWORD_SHORT
	"struct",   //24 :: TOK_KEYWORD_STRUCT
	"switch",   //25 :: TOK_KEYWORD_SWITCH
	"typedef",  //26 :: TOK_KEYWORD_TYPEDEF
	"union",    //27 :: TOK_KEYWORD_UNION
	"void",     //28 :: TOK_KEYWORD_VOID
	"while",    //29 :: TOK_KEYWORD_WHILE
	"volatile", //30 :: TOK_KEYWORD_VOLATILE
	"unsigned", //31 :: TOK_KEYWORD_UNSIGNED
	"+",        //32 :: TOK_SYMBOL_PLUS
	"-",        //33 :: TOK_SYMBOL_MINUS
	"*",        //34 :: TOK_SYMBOL_ASTERISK
	"/",        //35 :: TOK_SYMBOL_SLASH
	"%",        //36 :: TOK_SYMBOL_PERCENT
	"=",        //37 :: TOK_SYMBOL_EQUALS
	"==",       //38 :: TOK_SYMBOL_EQEQ
	"!=",       //39 :: TOK_SYMBOL_NOTEQ
	"<",        //40 :: TOK_SYMBOL_LESS
	">",        //41 :: TOK_SYMBOL_GREATER
	"<=",       //42 :: TOK_SYMBOL_LESSEQ
	">=",       //43 :: TOK_SYMBOL_GREATEREQ
	"&&",       //44 :: TOK_SYMBOL_ANDAND
	"||",       //45 :: TOK_SYMBOL_OROR
	"!",        //46 :: TOK_SYMBOL_NOT
	"&",        //47 :: TOK_SYMBOL_AMP
	"|",        //48 :: TOK_SYMBOL_PIPE
	"^",        //49 :: TOK_SYMBOL_CARET
	"~",        //50 :: TOK_SYMBOL_TILDE
	"<<",       //51 :: TOK_SYMBOL_LSHIFT
	">>",       //52 :: TOK_SYMBOL_RSHIFT
	"++",       //53 :: TOK_SYMBOL_INC
	"--",       //54 :: TOK_SYMBOL_DEC
	"->",       //55 :: TOK_SYMBOL_ARROW
	".",        //56 :: TOK_SYMBOL_DOT
	",",        //57 :: TOK_SYMBOL_COMMA
	";",        //58 :: TOK_SYMBOL_SEMICOLON
	":",        //59 :: TOK_SYMBOL_COLON
	"?",        //60 :: TOK_SYMBOL_QUESTION
	"(",        //61 :: TOK_SYMBOL_LPAREN
	")",        //62 :: TOK_SYMBOL_RPAREN
	"{",        //63 :: TOK_SYMBOL_LBRACE
	"}",        //64 :: TOK_SYMBOL_RBRACE
	"[",        //65 :: TOK_SYMBOL_LBRACKET
	"]",        //66 :: TOK_SYMBOL_RBRACKET
};
